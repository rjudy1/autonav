# ros2 bag record -o bags/run06062200950 /camera/color/image_raw /gps_heading /scan /rosout
/**:
    ros__parameters:
        /RealCourse:         True
        /FollowingDirection: 0          # 1  is right, 0 is left (line following)
        /UseYellow:          False      # True for yellow lines, False for white lines
        # going north = 20, going south 200
        /InitialHeading:     200.0      # robot's absolute initial heading. set before build in degrees.
        /NorthPointFirst:    False
        /GpsExitHeading:     0.0 #1.020304     # N, R: -2.121286; N, L: 2.3656318; S, R: -0.775958; S, L: 1.020304
        /CrossRampInGps:     True
        /RepeatGps:          False       # False = exit GPS mode after 4 waypoints are found. True = stay in GPS mode
        /LineDist:           0.15        # Distance in meters to follow the line from
        /StartState:         0          #3 GPS #0 Line
        # latitudes and longitudes of coordinates to use - assumes ramp will occur at middle two
        /PracticeLats:       [42.40092709166667, 42.40085157666667, 42.40080157666667, 42.400776035]
        /PracticeLons:       [-83.13107524, -83.13106738666667, -83.1310595933333, -83.1310595933333]
        /WaypointLats:       [42.40096900, 42.40088038666667, 42.40083898, 42.400749623333336]
        /WaypointLons:       [-83.13160718166666, -83.131620365, -83.131618495, -83.131591085]


/fsm:
    ros__parameters:
    
        /TimerRate:  0.05                       # rate at which to check and do state specified behavior
        /TurnSpeed:  6 #5 #20
        /SlightTurn: 6 #3 #18
        /ExitAngle:  0.3  #1.15 #0.1
        # Encoder Box Following (state 11-12) Parameters
        /EncoderBoxTurnLeft: False # used to configure the turn direction. False -> turn right
        /EncoderBoxDistance: 0.2 # 0.5   # distance in meters of each side of the encoder's "box"
        /EncoderBoxSpeed:    5.0   #
        # Pothole state parameter
        /PotholeSpeed: 5.0 #8.0
        /PotholeDistance: 0.2
        /PotholeDistanceEx: 0.7 # 1.2 FOR LINE FOLLOWING. 0.7 IS FOR GPS
        /PotholeTurnLeft: False # If you are left line following set False
        /PotholeEnable: False # If you want to disable, set to false.

/rplidar_node:
    ros__parameters:
        serial_port:                '/dev/LIDAR_PORT'

/lines:
    ros__parameters:
        /LineDetectCropTop:         .05         # fraction to remove
        /LineApproachCropTop:       .45
        /LineDetectCropBottom:      .2
        /LineDetectCropSide:        .2
        /LineDetectDistance:        1.05        # needs cleaned out but avoiding breakage currently
        /Debug:                     True


/obstacles:
    ros__parameters:
        /ObstacleFOV:               0.8754  # radians = 50.1567 degrees
        /PotholeDetectCropTop:      0.4
        /PotholeDetectCropBottom:   0.2
        /PotholeDetectCropSide:     0.2
        /PotholeBufferSize:         5
        /ObstacleDetectDistance:    0.85  #1.1        # # meters = # inches
        /ObstacleToPlainDistance:   2.0                # meters =  inches
        /ObstacleNoiseMinDist:      0.3 #0.3          # # meters = # inches
        /Debug:                     True

# enter waypoints north to south in converted to dd.mmmmmmm form
/gps:
    ros__parameters:
        /SensorInput:           0     # 0 = GPS, 1 = shaft encoders
        /InputInitialCondition: False # True = use initial condition params, False = use take_reading() to get initial condition
        ## Alpha-Beta-Gamma Filter Parameters
        /FilterType:            0       # 0 = raw data, 1 = ABG filter, 2 = LPF
        /Alpha:                 0.1     # Initial ABG filter parameters
        /Beta:                  0.5     #
        /Gamma:                 0.5     #
        /InitialLatDot:         0.0     # Initial velocity in the latitudinal direction in GPS units (DMM)/second
        /InitialLatDotDot:      0.0     # Initial acceleration in the latitudinal direction in GPS units (DMM)/second^2
        /InitialLonDot:         0.0     # Initial velocity in the longitudinal direction in GPS units (DMM)/second
        /InitialLonDotDot:      0.0     # Initial acceleration in the longitudinal direction in GPS units (DMM)/second^2
        ## Practice Coordinates
        /PracticeInitialLat:   39.4483377 # invalid
        /PracticeInitialLon:   -83.4879768 # invalid

        ## Real Coordinates
        /InitialLat: 0.0
        /InitialLon: 0.0

        # array of waypoints to pass through - can have any number - passed from general

        ## Other parameters
        /GPSFollowGoal:             1.05
        /LineToGPSTrans:            5.0
        /Port:                      '/dev/GPS_PORT'
        /Debug:                     True

/teensy:
    ros__parameters:
        /TeensyEncodersPort:        '/dev/TEENSY_PORT'
        /TeensyBaudrate:            115200
        /TeensyUpdateDelay:         .05
        /SideObjectDist:            0.15 # 0.85
        /LineSpeed:                 11.0
        /ObjectSpeed:               8.0
        /GpsSpeed:                  11.0
        /BoostIncrease:             1 #9
        /BoostCountThreshold:       8
        /GPSBoostCountThreshold:    10
        /LineBoostMargin:           10.0 #55.0

/fusion:
    ros__parameters:
        /ExitAngle:                 0.4  # +/- angle range we need to achieve to leave obstacle avoidance and return to GPS mode. radians = 22.9183 degrees
        ## Heading Weights -- note that GPS weight is 1 - EncoderWeight - ImuWeight
        /EncoderWeight:             0.3
        /ImuWeight:                 0.5
        /Debug:                     False
